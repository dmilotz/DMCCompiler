/* Generated By:JJTree&JavaCC: Do not edit this line. Language.java */
package wci.frontend;

import java.util.ArrayList;
import java.util.HashSet;
import java.io.*;

import wci.intermediate.*;
import wci.backend.*;
import wci.util.*;

import wci.intermediate.symtabimpl.*;
import wci.intermediate.typeimpl.*;
import wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import wci.intermediate.symtabimpl.DefinitionImpl.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class Language/*@bgen(jjtree)*/implements LanguageTreeConstants, LanguageConstants {/*@bgen(jjtree)*/
  protected static JJTLanguageState jjtree = new JJTLanguageState();private static final String SOURCE_SUFFIX = ".pcl";
    private static final String OUTPUT_SUFFIX = ".j";

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;

    public static void main(String[] args)
        throws Exception
    {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

        // Process the source file path which ends in .pcl
        // and create the output file path which ends in .j
        String sourceFilePath = args[0];
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
            : sourceFilePath + OUTPUT_SUFFIX;

        // Parse a Pcl program.
        Reader    reader = new FileReader(sourceFilePath);
        Language parser = new Language(reader);
        SimpleNode rootNode = parser.Program();

        // Print the cross-reference table.
        CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);


        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);

                // Create the compiler backend and generate code.
        Backend backend = BackendFactory.createBackend("compile");
        backend.process(iCode, symTabStack, objectFilePath);


    }

/*****************************************************************************

	Language Productions

******************************************************************************/

/* Based on PLC */
  static final public SimpleNode Program() throws ParseException {
                                 /*@bgen(jjtree) Program */
        ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
        programId = symTabStack.enterLocal("");
    programId.setDefinition(DefinitionImpl.PROGRAM);
    programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
    symTabStack.setProgramId(programId);
    try {
      try {
        rootNode = StatementList();
            {if (true) return rootNode;}
      } catch (ParseException ex) {
        HashSet syncSet = new HashSet();
        syncSet.add(EOF);

        handleError(ex, syncSet, true);
        {if (true) return null;}
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

/* 
   Based on PLC -  
	Removed error checking code.
	Removed #void.
*/
  static final public SimpleNode StatementList() throws ParseException {
                               /*@bgen(jjtree) StatementList */
        ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);HashSet syncSet = new HashSet();
    syncSet.add(SEMICOLON);
    syncSet.add(EOF);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case FUNCTION:
        case DISPLAY:
        case BOOLEAN_TYPE:
        case DOMAIN_TYPE:
        case INTEGER_TYPE:
        case INTEGER_LIST_TYPE:
        case REAL_LIST_TYPE:
        case STRING_LIST_TYPE:
        case REAL_TYPE:
        case STRING_TYPE:
        case URL_TYPE:
        case DOLLAR_SIGN:
        case IDENTIFIER:
        case ERROR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Statement(syncSet);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/* 
	Based on PLC - 
		Removed Assignment, MethodCall
*/
  static final public void Statement(HashSet syncSet) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
        BlockStatement();
        break;
      case FUNCTION:
        Function();
        break;
      case BOOLEAN_TYPE:
      case DOMAIN_TYPE:
      case INTEGER_TYPE:
      case INTEGER_LIST_TYPE:
      case REAL_LIST_TYPE:
      case STRING_LIST_TYPE:
      case REAL_TYPE:
      case STRING_TYPE:
      case URL_TYPE:
        VariableDeclaration(0);
        break;
      case DOLLAR_SIGN:
        AssignmentStatement();
        break;
      case IDENTIFIER:
        FuncCall();
        break;
      case DISPLAY:
        display();
        break;
      case ERROR:
        Error();
                   {if (true) throw new ParseException();}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
         handleError(ex, syncSet, false);
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void BlockStatement() throws ParseException {
                                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement();
      break;
    case FOR:
      ForStatement();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* mks */
  static final public Token VariableDeclaration(int x) throws ParseException {
                                             /*@bgen(jjtree) TypeSpec */
                                             ASTTypeSpec jjtn000 = new ASTTypeSpec(JJTTYPESPEC);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);ArrayList<SymTabEntry> variableList;
                                         int index = 0;
    try {
      TypeSpecification();
                Token typeSpecToken = token;
      jj_consume_token(DOLLAR_SIGN);
      jj_consume_token(IDENTIFIER);
                        variableList = new ArrayList<SymTabEntry>();
            processVariableDecl(token, index++, variableList);

                        SymTabEntry typeId = symTabStack.lookup(typeSpecToken.image);
            typeId.appendLineNumber(typeSpecToken.beginLine);
            TypeSpec type = typeId.getTypeSpec();
                        jjtn000.setTypeSpec(type);
                        if(x==1)
                        jjtn000.setAttribute(ID, token.image);
            for (SymTabEntry variableId : variableList) {
              if(x ==1)
                variableId.setTypeSpec(Predefined.funcParamType);
                else
                variableId.setTypeSpec(type);
            }
            {if (true) return typeSpecToken;}
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        programId.setAttribute(ROUTINE_LOCALS_COUNT, index);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void display() throws ParseException {
                         /*@bgen(jjtree) display */
  ASTdisplay jjtn000 = new ASTdisplay(JJTDISPLAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DISPLAY);
      jj_consume_token(LEFT_PAREN);
      Factor();
      jj_consume_token(RIGHT_PAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForStatement() throws ParseException {
                            /*@bgen(jjtree) For */
                            ASTFor jjtn000 = new ASTFor(JJTFOR);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LEFT_PAREN);
      AssignmentStatement();
      jj_consume_token(SEMICOLON);
      BooleanExpression();
      jj_consume_token(SEMICOLON);
      AssignmentStatement();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(LEFT_BRACE);
      StatementList();
      jj_consume_token(RIGHT_BRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IfStatement() throws ParseException {
                           /*@bgen(jjtree) IF */
                           ASTIF jjtn000 = new ASTIF(JJTIF);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(IF);
      IfBlockStructure();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
      case ELSEIF:
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSEIF:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          jj_consume_token(ELSEIF);
                    ASTELSEIF jjtn001 = new ASTELSEIF(JJTELSEIF);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
          try {
            IfBlockStructure();
          } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
          } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
          }
        }
        jj_consume_token(ELSE);
          ASTELSE jjtn002 = new ASTELSE(JJTELSE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          ElseBlockStructure();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IfBlockStructure() throws ParseException {
                                  Token t;
    jj_consume_token(LEFT_PAREN);
    BooleanExpression();
    jj_consume_token(RIGHT_PAREN);
    jj_consume_token(LEFT_BRACE);
    StatementList();
    jj_consume_token(RIGHT_BRACE);
  }

  static final public void ElseBlockStructure() throws ParseException {
                                    Token t;
    jj_consume_token(LEFT_BRACE);
    StatementList();
    jj_consume_token(RIGHT_BRACE);
  }

  static final public void BooleanExpression() throws ParseException {
                                    /*@bgen(jjtree) RelOp */
                                    ASTRelOp jjtn000 = new ASTRelOp(JJTRELOP);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      Factor();
      RelationalOp();
      Factor();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AssignmentStatement() throws ParseException {
                               /*@bgen(jjtree) AssignmentStatement */
  ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable();
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPBR:
        listType();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGNMENT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPBR:
        listType();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TypeSpecification() throws ParseException {
                                   Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_TYPE:
      jj_consume_token(BOOLEAN_TYPE);
      break;
    case URL_TYPE:
      jj_consume_token(URL_TYPE);
      break;
    case DOMAIN_TYPE:
      jj_consume_token(DOMAIN_TYPE);
      break;
    case INTEGER_TYPE:
      jj_consume_token(INTEGER_TYPE);
      break;
    case STRING_LIST_TYPE:
      jj_consume_token(STRING_LIST_TYPE);
      break;
    case REAL_LIST_TYPE:
      jj_consume_token(REAL_LIST_TYPE);
      break;
    case INTEGER_LIST_TYPE:
      jj_consume_token(INTEGER_LIST_TYPE);
      break;
    case REAL_TYPE:
      jj_consume_token(REAL_TYPE);
      break;
    case STRING_TYPE:
      jj_consume_token(STRING_TYPE);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Variable() throws ParseException {
                              /*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLLAR_SIGN);
      jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
void Function() #Func : {Token t;}
{
	< FUNCTION > t =<IDENTIFIER > //id = identifier 
	<LEFT_PAREN> 
	(TokenSpecification()(< COMMA > TokenSpecification())*) 
	<RIGHT_PAREN>	<LEFT_BRACE> StatementList() <RIGHT_BRACE>	  
}
*/
  static final public void Function() throws ParseException {
                         /*@bgen(jjtree) Func */
        ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);// for declaration
        ArrayList<SymTabEntry> functionList;
        int index = 0;
        // for definition
        HashSet syncSet = new HashSet();
    syncSet.add(SEMICOLON);
    syncSet.add(EOF);
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER);
                functionList = new ArrayList<SymTabEntry>();
                processFunctionDecl(token, index++, functionList);

                SymTabEntry typeId = symTabStack.lookup(token.image);
                System.out.println(token.image);
                typeId.appendLineNumber(token.beginLine);
                TypeSpec type = typeId.getTypeSpec();

                for (SymTabEntry functionId : functionList) {
                        functionId.setTypeSpec(Predefined.funcType);
                }

                SymTabEntry functionId = symTabStack.lookup(token.image);
        functionId.appendLineNumber(token.beginLine);
        type = functionId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, functionId);
      jj_consume_token(LEFT_PAREN);
      FuncParams();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(COLON);
      FuncReturnType();
      jj_consume_token(LEFT_BRACE);
      StatementList();
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case INTEGER:
      case REAL:
      case DOLLAR_SIGN:
        Factor();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      jj_consume_token(RIGHT_BRACE);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
        programId.setAttribute(ROUTINE_LOCALS_COUNT, index);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FuncCall() throws ParseException {
                             /*@bgen(jjtree) FuncCall */
  ASTFuncCall jjtn000 = new ASTFuncCall(JJTFUNCCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FuncVar();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setTypeSpec(Predefined.funcCallType);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FuncVar() throws ParseException {
                         /*@bgen(jjtree) FuncVar */
  ASTFuncVar jjtn000 = new ASTFuncVar(JJTFUNCVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
        SymTabEntry variableId = symTabStack.lookup(token.image);
        variableId.appendLineNumber(token.beginLine);
        TypeSpec type = variableId.getTypeSpec();
        jjtn000.setTypeSpec(type);
        jjtn000.setAttribute(ID, variableId);
      jj_consume_token(LEFT_PAREN);
      Factor();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        Factor();
      }
      jj_consume_token(RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FuncParams() throws ParseException {
                               /*@bgen(jjtree) FuncParams */
  ASTFuncParams jjtn000 = new ASTFuncParams(JJTFUNCPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
 int x;
  x =1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_TYPE:
      case DOMAIN_TYPE:
      case INTEGER_TYPE:
      case INTEGER_LIST_TYPE:
      case REAL_LIST_TYPE:
      case STRING_LIST_TYPE:
      case REAL_TYPE:
      case STRING_TYPE:
      case URL_TYPE:
        VariableDeclaration(x);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          VariableDeclaration(x);
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void FuncReturnType() throws ParseException {
                                       /*@bgen(jjtree) FuncReturnType */
  ASTFuncReturnType jjtn000 = new ASTFuncReturnType(JJTFUNCRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case INTEGER_TYPE:
      case INTEGER_LIST_TYPE:
      case REAL_LIST_TYPE:
      case STRING_LIST_TYPE:
      case REAL_TYPE:
      case STRING_TYPE:
      case URL_TYPE:
        listItemType();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* new stuff! */
  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INTEGER:
    case REAL:
    case MINUS:
    case PLUS:
    case DOLLAR_SIGN:
      SimpleExpression();
      break;
    case OPBR:
      listSize();
      break;
    case IDENTIFIER:
      FuncCall();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SimpleExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case PLUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                 ASTAdd jjtn001 = new ASTAdd(JJTADD);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          Term();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                  ASTSubtract jjtn002 = new ASTSubtract(JJTSUBTRACT);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          Term();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Term() throws ParseException {
                      Token t;
    Factor();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
                                 ASTMultOp jjtn001 = new ASTMultOp(JJTMULTOP);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
          Factor();
        } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                                   ASTDivOp jjtn002 = new ASTDivOp(JJTDIVOP);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
        try {
          Factor();
        } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte002;}
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte002;}
                                   }
                                   {if (true) throw (Error)jjte002;}
        } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                   }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR_SIGN:
      Variable();
      break;
    case STRING:
    case INTEGER:
    case REAL:
      SimpleType();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SimpleType() throws ParseException {
                           Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      integerConstant();
      break;
    case REAL:
      realConstant();
      break;
    case STRING:
      stringConstant();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void RelationalOp() throws ParseException {
                        /*@bgen(jjtree) RelationalOp */
                        ASTRelationalOp jjtn000 = new ASTRelationalOp(JJTRELATIONALOP);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        t = jj_consume_token(EQUALS);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.relType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case NOT_EQUALS:
        t = jj_consume_token(NOT_EQUALS);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.relType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case LESS_EQUALS:
        t = jj_consume_token(LESS_EQUALS);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.relType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case GREATER_EQUALS:
        t = jj_consume_token(GREATER_EQUALS);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.relType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case LESS_THAN:
        t = jj_consume_token(LESS_THAN);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.relType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case GREATER_THAN:
        t = jj_consume_token(GREATER_THAN);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.relType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

////////////////////////////////////////////////////////////////
  static final public void listSize() throws ParseException {
                            /*@bgen(jjtree) ListSize */
                            ASTListSize jjtn000 = new ASTListSize(JJTLISTSIZE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(OPBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        integerConstant();
        break;
      case DOLLAR_SIGN:
        Variable();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLBR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listItemType() throws ParseException {
                     /*@bgen(jjtree) listItemType */
  ASTlistItemType jjtn000 = new ASTlistItemType(JJTLISTITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_TYPE:
        jj_consume_token(INTEGER_TYPE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case STRING_TYPE:
        jj_consume_token(STRING_TYPE);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case REAL_TYPE:
        jj_consume_token(REAL_TYPE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case URL_TYPE:
        jj_consume_token(URL_TYPE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTypeSpec(Predefined.urlType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case INTEGER_LIST_TYPE:
        jj_consume_token(INTEGER_LIST_TYPE);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.intListType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case STRING_LIST_TYPE:
        jj_consume_token(STRING_LIST_TYPE);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.stringListType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      case REAL_LIST_TYPE:
        jj_consume_token(REAL_LIST_TYPE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setTypeSpec(Predefined.realListType);
        jjtn000.setAttribute(VALUE, token.image);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void listType() throws ParseException {
                             /*@bgen(jjtree) ListIndex */
                             ASTListIndex jjtn000 = new ASTListIndex(JJTLISTINDEX);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(OPBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        integerConstant();
        break;
      case DOLLAR_SIGN:
        Variable();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLBR);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void integerConstant() throws ParseException {
                          /*@bgen(jjtree) integerConstant */
  ASTintegerConstant jjtn000 = new ASTintegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void realConstant() throws ParseException {
                       /*@bgen(jjtree) realConstant */
  ASTrealConstant jjtn000 = new ASTrealConstant(JJTREALCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REAL);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.realType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void stringConstant() throws ParseException {
                         /*@bgen(jjtree) stringConstant */
  ASTstringConstant jjtn000 = new ASTstringConstant(JJTSTRINGCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Error() throws ParseException {
    jj_consume_token(ERROR);
  }

/* Original version */
  static void processVariableDeclOrg(Token tokenoken, int index,
                         ArrayList<SymTabEntry> variableList) throws ParseException {
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
  }

  static void processVariableDecl_silva(Token tokenoken, SymTabStack symTabStack) throws ParseException {
        SymTabEntry variableId = symTabStack.lookupLocal(token.image);

        if (variableId != null) {
                variableId.appendLineNumber(token.beginLine);
        }

        else {
                variableId = symTabStack.enterLocal(token.image);
                variableId.appendLineNumber(token.beginLine);
                variableId.setDefinition(DefinitionImpl.VARIABLE);
                variableId.setAttribute(ROUTINE_SYMTAB, token.image);
        }
  }

  static void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList) throws ParseException {
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
  }

  static void processFunctionDecl(Token token, int index,
                         ArrayList<SymTabEntry> funcList) throws ParseException {
    SymTabEntry funcId = symTabStack.enterLocal(token.image);
    funcId.setIndex(index);
    funcId.setDefinition(DefinitionImpl.FUNCTION);
    funcId.appendLineNumber(token.beginLine);
    funcList.add(funcId);
  }

  static String handleError(ParseException ex, HashSet syncSet, boolean doPop) throws ParseException {
    Token tokenoken = ex.currentToken;
    System.out.println(ex.getMessage());

    // Consume tokens up to but not including a token in the sync set.
    while (!syncSet.contains(getToken(1).kind)) {
        token = getNextToken();
    }

    if (doPop) jjtree.popNode();
    return token.image;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LanguageTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffce0000,0xffce0000,0x60000,0x10000,0x18000,0x0,0x0,0xff800000,0x1c00,0x0,0x0,0xff800000,0xfe100000,0x1c00,0x0,0x0,0x0,0x0,0x0,0x0,0x1c00,0x1c00,0x0,0x800,0xfe000000,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x30800000,0x30800000,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x800000,0x2000000,0x2000000,0x0,0x0,0x14801800,0x1800,0x1800,0x1800,0x1800,0x600,0x600,0x800000,0x0,0x180a3,0x800000,0x0,0x800000,};
   }

  /** Constructor with InputStream. */
  public Language(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Language(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Language(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Language(LanguageTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
